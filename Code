# import the necessary packages
from tkinter import *
import tkinter
from PIL import Image
from PIL import ImageTk
from tkinter import filedialog
import cv2
import random
import string
import datetime
import pyttsx3
from pyttsx3 import speak

engine = pyttsx3.init()

engine.setProperty('rate', 187)

root = tkinter.Tk()
root = tkinter.Tk()
root.geometry("350x600")

def main():
        


        hour = int(datetime.datetime.now().hour)
        if hour>=0 and hour <12:
                speak("GOOD MORNING Musab !")
        
        elif hour >= 12 and hour <18:
                speak("GOOD AFTERNOON  Musab !")
        
        else:
                speak("GOOD EVENING  Musab !")

        speak(" Pease select given Options !")

        


# 1 st filter 
        def  Canny_image():
                speak("you have slected first option image to Canny. This filter will give you the edged image of real images. ")
                
                # panel 

                global panelA, panelB
                panelA , panelB = None, None

                # open image
                path = filedialog.askopenfilename()

                if len(path) > 0:
                        
                        image1 = cv2.imread(path)
                        #Gray
                        gray = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
                        edged = cv2.Canny(gray, 50, 100)
                        
                        # swap the channels
                        image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2RGB)

                        
                                
                        lower = string.ascii_lowercase
                        upper = string.ascii_uppercase
                        num = string.digits
                        symbols = string.punctuation
                        length = 4
                        all = lower + upper + num + symbols

                        a = "".join(random.sample(all,length))

                        cv2.imwrite(f'C:\\Users\\Musab Inamdar\\OneDrive\\Desktop\\SDP Project\\output of Canny\\OutputOfCanny{str(a)}.png', edged)
                        print(speak("image saved successfully"))
                       
                        # convert the images to PIL format...
                        image1 = Image.fromarray(image1)
                        edged = Image.fromarray(edged)

                        # ...and then to ImageTk format
                        image1 = ImageTk.PhotoImage(image1)
                        edged = ImageTk.PhotoImage(edged)

                        # if the panels are None, initialize them
                        if panelA is None or panelB is None:
                        
                                # the first panel will store original image
                                panelA = Label(image=image1)
                                panelA.image = image1
                                panelA.pack(side="left", padx="10", pady="10")
                                
                                # the first panel will store Output image
                                panelB = Label(image=edged)
                                panelB.image = edged
                                panelB.pack(side="right", padx="10", pady="10")

                        # otherwise, update the image panels
                        else:
                                # update the pannels
                                panelA.configure(image=image1)
                                panelA.configure(image=edged)

                                panelA.image = image1
                                panelB.image = edged

                        
                
        # initialize the window toolkit along with the two image panels
               

        lable = Label(root, text="Photo effect App",fg="Red" , font=("Helvetica", 18))
        lable.pack(pady=20)

        button1 = Button(root , text='convert to Canny press here',background ='white' ,activebackground='yellow',width=30,font=("Helvetica",10), cursor="spraycan" ,command=Canny_image)
        button1.pack(padx=40, pady=10)
                
        



# 2nd filter     
        def filters():
                speak("You have selected second option which is bilateral Filter. used for  edge-preserving, and noise-reduction" )
                # grab a reference to the image panels
                global panelA, panelB
                panelA , panelB = None, None

                #select image from computer
                path = filedialog.askopenfilename()

                # ensure a file path was selected
                if len(path) > 0:

                        image2 = cv2.imread(path)
                        Bfilter = cv2.bilateralFilter(image2,15 ,75,75 )

                        # swap the channels

                        # image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2RGB)
                        
                        lower = string.ascii_lowercase
                        upper = string.ascii_uppercase
                        num = string.digits
                        symbols = string.punctuation
                        length = 4
                        all = lower + upper + num + symbols

                        b = "".join(random.sample(all,length))
                        cv2.imwrite(f'C:\\Users\\Musab Inamdar\\OneDrive\\Desktop\\SDP Project\\Bilateral Filter\\Filter{str(b)}.png ', Bfilter)
                        print(speak("image saved successfully"))

                        # convert the images to PIL format...
                        image2 = Image.fromarray(image2)
                        Bfilter = Image.fromarray(Bfilter)

                        # ...and then to ImageTk format
                        image2 = ImageTk.PhotoImage(image2)
                        Bfilter = ImageTk.PhotoImage(Bfilter)

                        # if the panels are None, initialize them
                        if panelA is None or panelB is None:
                                # the first panel will store our original image
                                panelA = Label(image=image2)
                                panelA.image = image2
                                panelA.pack(side="left", padx="10", pady="10")
                                
                                
                                panelB = Label(image=Bfilter)
                                panelB.image = Bfilter
                                panelB.pack(side="right", padx="10", pady="10")

                        # otherwise, update the image panels
                        else:
                                # update the pannels
                                panelA.configure(image=image2)
                                panelA.configure(image=Bfilter)

                                panelA.image = image2
                                panelB.image = Bfilter

        # initialize the window toolkit along with the two image panels

        button2 = Button(root , text='convert to bilateral press here',background ='white' ,activebackground='yellow',width=30,font=("Helvetica",10), cursor="spraycan" , command=filters)
        button2.pack(padx=40, pady=10)



# 3rd filter
        def Gaussian_image():
                speak("You have selected third option, Gaussian Blur Filter. this filter is used  to reduce image noise and reduce detail. ")
                # grab a reference to the image panels
                global panelA, panelB
                panelA , panelB = None, None

        
                path = filedialog.askopenfilename()

                # ensure a file path was selected
                if len(path) > 0:
                        
                        image3 = cv2.imread(path)
                        Gblur = cv2.GaussianBlur(image3,(15,15), 100)
                        
                        # swap the channels
                        # image3 = cv2.cvtColor(image3, cv2.COLOR_BGR2RGB)

                        lower = string.ascii_lowercase
                        upper = string.ascii_uppercase
                        num = string.digits
                        symbols = string.punctuation
                        length = 4
                        all = lower + upper + num + symbols

                        c = "".join(random.sample(all,length))
                        cv2.imwrite(f'C:\\Users\\Musab Inamdar\\OneDrive\\Desktop\\SDP Project\\Output of Gaussian\\Gaussian{str(c)}.png ', Gblur)
                        print(speak("image saved successfully"))

                        # convert the images to PIL format...
                        image3 = Image.fromarray(image3)
                        Gblur = Image.fromarray(Gblur)

                        

                        # ...and then to ImageTk format
                        image3 = ImageTk.PhotoImage(image3)
                        Gblur = ImageTk.PhotoImage(Gblur)

                        # if the panels are None, initialize them
                        if panelA is None or panelB is None:
                                # the first panel will store our original image
                                panelA = Label(image=image3)
                                panelA.image = image3
                                panelA.pack(side="left", padx="10", pady="10")
                                
                                
                                panelB = Label(image=Gblur)
                                panelB.image = Gblur
                                panelB.pack(side="right", padx="10", pady="10")

                        # otherwise, update the image panels
                        else:
                                # update the pannels
                                panelA.configure(image=image3)
                                panelA.configure(image=Gblur)

                                panelA.image = image3
                                panelB.image = Gblur


        # initialize the window toolkit along with the two image panels

                # btn = Button(root, text="Select another image for Gaussian blur",command=Gaussian_image)
                # btn.pack(side="bottom", padx="10", pady="10")


        button3 = Button(root , text='convert to Gaussian press here',background ='white' ,activebackground='yellow',width=30,font=("Helvetica",10), cursor="spraycan" , command=Gaussian_image)
        button3.pack(padx=40, pady=10)


# 4th filter
        def  median():
                speak("you have slected image to median Blur option. median filtering smoothes the image and useful in reducing noise. ")
                
                # panel 

                global panelA, panelB
                panelA , panelB = None, None

                # open image
                path = filedialog.askopenfilename()

                if len(path) > 0:
                        
                        image4 = cv2.imread(path)
                        #Gray
                        # gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                        med = cv2.medianBlur(image4,5)
                        
                        # swap the channels
                        image4 = cv2.cvtColor(image4, cv2.COLOR_BGR2RGB)

                        
                        lower = string.ascii_lowercase
                        upper = string.ascii_uppercase
                        num = string.digits
                        symbols = string.punctuation
                        length = 4
                        all = lower + upper + num + symbols

                        d = "".join(random.sample(all,length))
                                
                        cv2.imwrite(f'C:\\Users\\Musab Inamdar\\OneDrive\\Desktop\\SDP Project\\Median Blur\\median{str(d)}.png ', med)
                        print(speak("image saved successfully"))


                        # convert the images to PIL format...
                        image4 = Image.fromarray(image4)
                        med = Image.fromarray(med)

                        # ...and then to ImageTk format
                        image4 = ImageTk.PhotoImage(image4)
                        med = ImageTk.PhotoImage(med)

                        # if the panels are None, initialize them
                        if panelA is None or panelB is None:
                        
                                # the first panel will store original image
                                panelA = Label(image=image4)
                                panelA.image = image4
                                panelA.pack(side="left", padx="10", pady="10")
                                
                                # the first panel will store Output image
                                panelB = Label(image=med)
                                panelB.image = med
                                panelB.pack(side="right", padx="10", pady="10")

                        # otherwise, update the image panels
                        else:
                                # update the pannels
                                panelA.configure(image=image4)
                                panelA.configure(image=med)

                                panelA.image = image4
                                panelB.image = med
                
        # initialize the window toolkit along with the two image panels


        button4 = Button(root , text='Convert to median press here',background ='white' ,activebackground='yellow',width=30,font=("Helvetica",10), cursor="spraycan" , command=median)
        button4.pack(padx=40, pady=10)

        btn5 = Button(root, text="exit" ,background ='red' ,activebackground='red',width=30, font=("Helvetica",10), cursor="pirate" , command=root.destroy)
        btn5.pack(padx=40, pady=10)


        # kick off the GUI
        root.mainloop()
        


if __name__ == "__main__":
        main()
